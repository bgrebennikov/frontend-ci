pipeline {
    agent any

    environment {
        IMAGE_NAME = 'frontend' // –ò–º—è Docker-–æ–±—Ä–∞–∑–∞
        CONTAINER_NAME = 'frontend-container' // –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        TEMP_CONTAINER_NAME = 'frontend-container-new' // –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        OLD_PORT = '3000' // –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ä—Ç
        TEMP_PORT = '3001' // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${IMAGE_NAME}:latest ."
                }
            }
        }

        stage('Remove Old Temporary Container') {
            steps {
                script {
                    sh """
                        echo "üõë –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ${TEMP_CONTAINER_NAME} (–µ—Å–ª–∏ –µ—Å—Ç—å)"
                        docker stop ${TEMP_CONTAINER_NAME} 2>/dev/null || true
                        docker rm ${TEMP_CONTAINER_NAME} 2>/dev/null || true
                    """
                }
            }
        }

        stage('Run New Container on Temporary Port') {
            steps {
                script {
                    sh """
                        echo "üöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ${TEMP_CONTAINER_NAME} –Ω–∞ –ø–æ—Ä—Ç—É ${TEMP_PORT}"
                        docker run -d --name ${TEMP_CONTAINER_NAME} -p ${TEMP_PORT}:3000 ${IMAGE_NAME}:latest
                    """
                }
            }
        }

        stage('Wait and Test New Container') {
            steps {
                script {
                    sh """
                        echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
                        sleep 5

                        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
                        curl --fail http://localhost:${TEMP_PORT} || (echo "‚ùå –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç!" && exit 1)
                    """
                }
            }
        }

        stage('Switch Traffic') {
            steps {
                script {
                    sh """
                        echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ${CONTAINER_NAME}"
                        docker stop ${CONTAINER_NAME} 2>/dev/null || true
                        docker rm ${CONTAINER_NAME} 2>/dev/null || true

                        echo "üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ä—Ç—É ${OLD_PORT}"
                        docker stop ${TEMP_CONTAINER_NAME} || true
                        docker rm ${TEMP_CONTAINER_NAME} || true
                        docker run -d --name ${CONTAINER_NAME} -p ${OLD_PORT}:3000 ${IMAGE_NAME}:latest
                    """
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
        }
        failure {
            echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏, —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å—Ç–∞—ë—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º!"
        }
    }
}
