pipeline {
    agent any

    environment {
        IMAGE_NAME = 'frontend' // –ò–º—è Docker-–æ–±—Ä–∞–∑–∞
        CONTAINER_NAME = 'frontend-container' // –ò–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        PORT_MAPPING = '3000:3000' // –ü—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–æ–≤
        OLD_PORT = '8080' // –°—Ç–∞—Ä—ã–π –ø–æ—Ä—Ç
        TEMP_CONTAINER_NAME = 'frontend-container-new' // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${IMAGE_NAME} ."
                }
            }
        }

        stage('Stop and Remove Old Container') {
            steps {
                script {
                    sh """
                        docker stop ${CONTAINER_NAME} 2>/dev/null || true
                        docker rm ${CONTAINER_NAME} 2>/dev/null || true
                    """
                }
            }
        }

        stage('Run New Container') {
            steps {
                script {
                    sh "docker run -d --name ${TEMP_CONTAINER_NAME} -p ${PORT_MAPPING} ${IMAGE_NAME}:latest"
                }
            }
        }

        stage('Switch Traffic') {
            steps {
                script {
                    sh """
                        echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ${CONTAINER_NAME}"
                        docker stop ${CONTAINER_NAME} 2>/dev/null || true
                        docker rm ${CONTAINER_NAME} 2>/dev/null || true

                        echo "üîÅ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ${TEMP_CONTAINER_NAME} –Ω–∞ –ø–æ—Ä—Ç—É ${OLD_PORT}"

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
                        if docker ps --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}\$"; then
                            echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${CONTAINER_NAME} —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç."
                        else
                            echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${CONTAINER_NAME} –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ."
                            docker network disconnect frontend-network ${TEMP_CONTAINER_NAME} || true
                            docker network connect frontend-network ${TEMP_CONTAINER_NAME}
                            docker run -d --name ${CONTAINER_NAME} -p ${OLD_PORT}:3000 ${IMAGE_NAME}:latest
                        fi
                    """
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
        }
        failure {
            echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏!"
        }
    }
}
